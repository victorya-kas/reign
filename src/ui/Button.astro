---
import { images } from "@images/images";
import obliqueTrapezoidGold from "@images/oblique-trapezoid-gold.png"

type variant =
  | "gold-bordered"
  | "silver-bordered"
  | "trapezoid-left"
  | "trapezoid-right"
  | "oblique-trapezoid"
  | "oblique-trapezoid-outline";
type size = "sm" | "md" | "lg";
interface Props {
  variant: variant;
  size?: size;
  className?: string | undefined;
}

const { variant, size = "sm", className, ...rest } = Astro.props as Props;

const bthClasses = `flex justify-center items-center relative ${variant} ${size} ${
  className ?? ""
}`;
---

<style>
  button[class*="bordered"].sm {
    width: 27px;
    height: 16px;
    border-radius: 3px;
    padding: 1px;
  }
  button[class*="bordered"].sm > span {
    border-radius: 3px;
    padding: 2px 5px;
  }
  button[class*="bordered"].lg {
    width: 80px;
    height: 50px;
    border-radius: 6px;
    padding: 1px;
  }
  button[class*="bordered"].lg > span {
    border-radius: 6px;
    padding: 4px 10px;
  }
  button[class*="trapezoid"].lg {
    height: 100%;
    width: 78px;
    min-height: 43px;
    max-height: 86px;
    padding: clamp(10px, 1vw, 20px);
  }
  @media (min-width: 1024px) {
    button[class*="bordered"].sm {
      width: 36px;
      height: 24px;
    }
    button[class*="bordered"].lg {
      width: 120px;
      height: 75px;
    }
    button[class*="trapezoid"].lg {
      width: 110px;
    }
  }
  @media (min-width: 1440px) {
    button[class*="bordered"].sm {
      width: 45px;
      height: 32px;
    }
    button[class*="bordered"].lg {
      width: 160px;
      height: 100px;
    }
    button[class*="trapezoid"].lg {
      width: 156px;
    }
  }
</style>
{
  (variant === "silver-bordered" || variant === "gold-bordered") && (
    <button class={`shadow ${bthClasses}`} {...rest}>
      <span class="w-full h-full flex justify-center items-center bg-[#1C1C1C] z-10">
        <span
          class={`text-[12px] desktop-sm:text-[18px] desktop-lg:text-[24px] ${variant === "silver-bordered" ? "text-silver" : "text-gold"}`}
        >
          <slot />
        </span>
      </span>
    </button>
  )
}
{
  (variant === "trapezoid-left" || variant === "trapezoid-right") && (
    <button
      class={`relative bg-cover bg-center bg-no-repeat ${variant === "trapezoid-left" ? "" : ""} ${bthClasses}`}
      style={{
        backgroundImage: `url(${variant === "trapezoid-left" ? images?.["trapezoid-btn-left"] : images?.["trapezoid-btn-right"]})`,
      }}
      {...rest}
    >
      <span
        class={`text-gold text-20-40 ${variant === "trapezoid-left" ? "translate-x-[40%] -translate-y-[10%]" : "-translate-x-[11px]"}`}
      >
        <slot />
      </span>
    </button>
  )
}

{(variant === "oblique-trapezoid" || variant === "oblique-trapezoid-outline") && 
  <button
      class={`group bg-cover bg-center bg-no-repeat py-2 px-8 w-[147px] h-[40px] has-["lg"]:w-[190px] has-["lg"]:h-[54px] ${bthClasses}`}
      style={{
        backgroundImage: `url(${obliqueTrapezoidGold?.src})`,
      }}
      {...rest}
    >
      <span
        class={`text-gold overflow-hidden italic text-sm group-has-["lg"]:text-lg border border-transparent  ${variant === "oblique-trapezoid" ? "bg-gradient-to-b from-dark-3 to-dark-4" : ""}`}
      >
        <slot />
      </span>
    </button>
}
